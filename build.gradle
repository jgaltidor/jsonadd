plugins {
    id "java"
    id "antlr"
    id "org.jastadd" version "1.13.1"
    id "application"
}

def mainClassName = "jga.jsonadd.Main"
def generatedSrcDir = "build/generated-src/"
def generatedAntlrSrcPath = generatedSrcDir + "main/antlr/"
def generatedJastaddSrcPath = generatedSrcDir + "main/jastadd/"
def jastAddSrcDir = "src/main/jastadd/"
def jastAddAstPackage = "jga.jsonadd.jastadd"

task generateAst(type: JavaExec) {
  def sources = fileTree(jastAddSrcDir)
  def jastaddOptions = [
    "--o=$generatedJastaddSrcPath",
    "--package=$jastAddAstPackage"
  ]
  // First, clean the destination directory
  // so old generated files are removed.
  def outputDir = file(generatedJastaddSrcPath)
  outputDir.deleteDir()
  // Ensure the output directory exists
  // before running JastAdd.
  outputDir.mkdirs()
  mainClass = "org.jastadd.JastAdd"
  classpath = project.configurations.jastadd2
  args = jastaddOptions + sources.files

  doFirst {
    file(generatedJastaddSrcPath).mkdirs()
  }
}

// Generate code before compiling
compileJava.dependsOn 'generateAst'

generateGrammarSource {
    outputDirectory = file(generatedAntlrSrcPath)
    arguments += ["-visitor"]
}

sourceSets.main.java.srcDir generatedAntlrSrcPath
sourceSets.main.java.srcDir generatedJastaddSrcPath

repositories {
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.10"
    jastadd2 "org.jastadd:jastadd:2.3.5"
    testImplementation "junit:junit:4.13.2"
}

application {
    mainClass = mainClassName
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

task uberJar (type: Jar) {
  archiveClassifier = 'uber'
  manifest {
    attributes 'Main-Class': mainClassName
  }
  from {
    configurations.runtimeClasspath
      .findAll { it.name.endsWith('jar') }
      .collect { zipTree(it) }
  }
  with jar
}
